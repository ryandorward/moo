{"version":3,"sources":["components/PaperSheet.js","index.js"],"names":["withStyles","theme","root","Object","objectSpread","mixins","gutters","paddingTop","spacing","unit","paddingBottom","props","classes","react_default","a","createElement","Paper_default","className","elevation","Typography_default","variant","component","title","body","Calclet","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","e","change","target","value","index","TextField_default","label","onChange","margin","fullWidth","React","Component","Calculator","_this2","calclets","distance","state","i","length","calclet","timeTyped","slice","pace","hms","split","HMStoSeconds","j","isNaN","secondsToHMS","setState","id","src_Calclet","key","arr","push","GridListTile_default","renderCalclet","GridList_default","cols","cellHeight","class","Grid_default","container","justify","components_PaperSheet","renderCalclets","seconds","hours","Math","floor","minutes","str","round","ReactDOM","render","src_Calculator","document","getElementById"],"mappings":"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","file":"static/js/main.b534bc3a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n  },\n});\n\nfunction PaperSheet(props) {\n  const { classes } = props;\n\n  return (\n    <div>\n      \n      <Paper className={classes.root} elevation={1}>\n        <Typography variant=\"h5\" component=\"h3\">\n          {props.title}\n        </Typography>\n        <Typography component=\"p\">\n          {props.body}\n        </Typography>\n      </Paper>\n    </div>\n  );\n}\n\nPaperSheet.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PaperSheet);","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport TextField from '@material-ui/core/TextField';\nimport PaperSheet from './components/PaperSheet.js';\nimport './index.css';\n\n// centralize pace\n\n// make components that dynamically are built from Calclet. like <Calclet distance=\"42.2\"> for marathon\n// <Calclet distance=\"1.6\"> for mile pace\n// <Calclet distance=\"1\"> for 1km pace\n\nclass Calclet extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {    \n    this.props.change(e.target.value, this.props.index);\n  }\n\n  render () {  \n    const value = this.props.value;\n    return (\n      <div>              \n        <TextField       \n          label={this.props.label}                   \n          value= {value}        \n          onChange={this.handleChange} \n          margin=\"normal\"\n          variant=\"outlined\"\n          fullWidth = {true}\n        />                  \n      </div>   \n    );\n  }\n\n}\n\nclass Calculator extends React.Component {\n\n  calclets = [\n    {\n      distance: 1, \n      label: \"Pace 1km\",\n    },\n    {\n      distance: 1.60934, \n      label: \"Pace 1 mile\",\n    },\n    {\n      distance: 5,         \n    },\n    {\n      distance: 10,          \n    },\n    {\n      distance: 42.195/2, \n      label: \"Half Marathon\"    \n    },\n    {\n      distance: 42.195, \n      label: \"Marathon\"    \n    },\n    {\n      distance: 55,      \n    },\n    {\n      distance: 100,          \n    },\n    {\n      distance: 160,        \n    },\n  ];\n\n  constructor(props) {\n    super(props);\n    this.change = this.change.bind(this);\n\n    this.state = {      \n      calclets: [],\n    }\n\n    for (let i = 0; i < this.calclets.length; i++) {\n      let calclet = this.calclets[i];\n      this.state.calclets[i] = {\n        index: i,\n        distance: calclet.distance,        \n        value: '',\n      }\n    }\n    \n  } \n\n  change(timeTyped, i) {   \n    var calclets = this.state.calclets.slice();    \n    calclets[i].value = timeTyped;    \n\n    const timeS = HMStoSeconds(timeTyped);    \n    var pace = timeS/calclets[i].distance;   \n\n    for (var j in calclets) {\n      if (j != i) {\n        if (isNaN(pace))\n          calclets[j].value = '';\n        else \n          calclets[j].value = secondsToHMS(pace*calclets[j].distance);                    \n      }\n    }\n    \n    this.setState({\n      calclets: calclets,      \n    })\n    \n  }\n\n  renderCalclet(id) {\n    \n    return (\n      <Calclet\n        distance={this.calclets[id].distance}       \n        change={this.change}  \n        value={this.state.calclets[id].value}  \n        index={id} \n        key={id}      \n        label={this.calclets[id].label ? this.calclets[id].label : this.calclets[id].distance + \"km\"}\n      />\n    );\n  }\n\n  renderCalclets() {\n    let arr = []    \n    for (var i = 0; i < this.state.calclets.length; i++) {\n      arr.push(<GridListTile> {this.renderCalclet(i)}</GridListTile> );\n    }    \n    return <GridList cols={3} cellHeight={80}> { arr }</GridList>;\n  }\n\n  render () {\n    return (\n      <div class=\"full-outer\">      \n        <div class = \"full-inner\">\n          <Grid container justify = \"left\">\n            <PaperSheet \n              title = \"Dr. Ward's famous multi-directional Pace Calculator\"\n              body = \"Type in the time in any field, all of the rest will calculate. All fields are live! Times should follow the format HH:MM:SS. Examples of valid times: 5:30, 45:20 or 1:59:59\"  \n            />     \n          </Grid>\n        \n          {\n            this.renderCalclets()\n          }   \n     \n        </div>\n       \n      </div>\n    );\n  }\n\n}\n\nfunction secondsToHMS(seconds) {       \n    \n    var hours   = Math.floor(seconds / 3600);\n    var minutes = Math.floor((seconds- (hours * 3600)) / 60);\n    var seconds = Math.round(seconds - (hours * 3600) - (minutes * 60));\n\n    var str = \"\";\n    if (hours > 0) {     \n      str = hours + \":\"\n    }\n    if (hours > 0 || minutes > 0) {\n      if (minutes < 10 && hours > 0 ) {minutes = \"0\"+minutes}      \n        str = str + minutes + \":\";\n    }\n    if (seconds < 10) {seconds = \"0\"+seconds} \n    str = str + seconds;  \n    \n    return str;   \n\n}\n\nfunction HMStoSeconds(hms) { \n\n  var a = hms.split(':'); // split it at the colons\n\n  if (a.length > 3) return;\n  if (a.length == 3)\n    // minutes are worth 60 seconds. Hours are worth 60 minutes.\n    return (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n  if (a.length == 2)\n    return (+a[0]) * 60 + (+a[1]);\n  if (a.length == 3)\n    return (+a[0]);\n\n}\n\n// ========================================\n\nReactDOM.render(\n  <Calculator />,\n  document.getElementById('root')\n);"],"sourceRoot":""}